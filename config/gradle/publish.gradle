// This include file applies maven-publish related settings to places that need them (root project + modules)
// It is a superset of the the stuff common to Java sub projects so we include the common.gradle here
apply from: "$rootDir/config/gradle/common.gradle"

apply plugin: 'maven-publish'

publishing {
    publications {
        "$project.name"(MavenPublication) {
            // Without this we get a .pom with no dependencies
            from components.java

            artifact source: sourceJar, classifier: 'sources'
            artifact source: javadocJar, classifier: 'javadoc'

            repositories {
                maven {
                    name = 'TerasologyOrg'

                    if (rootProject.hasProperty("publishRepo")) {
                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties
                        url = "http://artifactory.terasology.org/artifactory/$publishRepo"
                        println "Changing PUBLISH repoKey set via Gradle property to $publishRepo"
                    } else {
                        // In this case we are going to fletch the publish repo together from a few things
                        // First if we have an override from the environment to use a different target publish org
                        String deducedPublishRepo = System.getenv()["PUBLISH_ORG"]
                        if (deducedPublishRepo == null || deducedPublishRepo == "") {
                            // If not then default
                            deducedPublishRepo = "terasology"
                        }
                        String releaseRepoFragment = "-release-local"
                        String snapshotRepoFragment = "-snapshot-local"

                        // Secondly we're going to find out if we're doing a release or a snapshot - this gets a little more complicated
                        String gitBranch = System.getenv()["BRANCH_NAME"]
                        if (gitBranch != null && gitBranch != "" && gitBranch.equals("master")) {
                            // Okay we're in an environment where a branch name is set to 'master' so we might be doing a release
                            // This is the funny part. Modules aren't ready globally to accept master branch == release, so check a prop that defaults to bypass
                            if (project.hasProperty("bypassModuleReleaseManagement")) {
                                if (bypassModuleReleaseManagement == "true") {
                                    println "Release management not enabled for " + project.name + ", using snapshot repo despite building 'master' branch"
                                    deducedPublishRepo += snapshotRepoFragment
                                } else {
                                    println "Release management *is* enabled for " + project.name + ", using release repo since building 'master' branch"
                                    deducedPublishRepo += releaseRepoFragment
                                }
                            } else {
                                println "We're working on a 'master' branch with defaults so using the release publish repo"
                                deducedPublishRepo += releaseRepoFragment
                            }
                        } else {
                            // No master branch so we for sure are just doing snapshots
                            println "We're not working with a branch name set that's 'master' so assuming we're publishing snapshots"
                            deducedPublishRepo += "-snapshot-local"
                        }
                        println "The final deduced publish repo is $deducedPublishRepo"
                        url = "http://artifactory.terasology.org/artifactory/$deducedPublishRepo"
                    }

                    if (rootProject.hasProperty("mavenUser") && rootProject.hasProperty("mavenPass")) {
                        credentials {
                            username = "$mavenUser"
                            password = "$mavenPass"
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }
        }
    }
}

